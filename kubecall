#!/bin/bash
function kubecall_main() {
    # Globals
    CONTEXT="context"
    LIST="list"
    SWITCH="switch"
    CURRENT="current"
    GET="get"
    POD="pod"
    PODS="pods"
    DESCRIBE="describe"
    DELETE="delete"
    LOGS="logs"
    EXEC="exec"
    EXECALL="execall"
    LINE_SEPERATOR="\n"

function kubecall_help() {
 KUBECTL_HELP=$(kubectl --help)
 cat << EndOfMessage
 kubecall: A wrapper around kubectl to interact with kubernetes in a faster way with minimal effort.

 kubecall provides some additional shortcut options on top of built-in kubectl along with autocompletion to
    reduce the user effort.
 During setup it creates a cache of available kubernetes context and list of all the pod name patterns for each
    context.
 This cache is used in autocompletion and which in turn allows faster context switching and pod access.

 Usage:
    $CONTEXT $SWITCH <context_name>                     : switches context to <context_name>
    $CONTEXT $LIST                                      : lists contexts matching
    $CONTEXT $CURRENT                                   : shows current context
    $GET $PODS <pod_pattern>                            : lists pods matching <pod_pattern> in current context, supports
                                   --context=<context_name< flag.
    $LOGS <pod_pattern>                                : tries to fetch logs of pod identified by <pod_pattern> from
                                                      current context, allows selection if more than 1 pod is found.
                                                      supports --context=<context_name>, --follow, --tail=<number>,
                                                      --json

    $EXEC <pod_pattern> <CMD>                          : executes a <CMD> on a pod name identified by <pod_pattern>
                                                      from current context, allows selection If more than 1 pod is found.
                                                      supports --context=<context_name>, -i/-t/-it

    $EXECALL <pod_pattern> <CMD>                       : executes a <CMD> on all pods identified by <pod_pattern> in
                                                      the current context, prints the output of each result on the stdout.
                                                      supports --context=<context_name>

    $DESCRIBE $POD <pod_pattern>                        : describes a pod identified by <pod_pattern> under current context.
                                                      supports --context=<context_name>

    $DELETE $POD <pod_pattern>                          : deletes pods identified by <pod_pattern> under current context after
                                                      selection and confirmation. supports --context=<context_name>

 During any step if you are stuck press <tab><tab> to get a list of options for the next command argument.
 Below is the official help for built-in kubectl commands:
 $KUBECTL_HELP
EndOfMessage
}
    declare -A kc_f_and_o
    args=( "$@" )
    function seperate_args_and_flags() {
        for i in ${!args[@]}
            do
                if [[ ${args[i]} == --* ]] && [[ ${args[i]} == *=* ]]; then
                    old_ifs=$IFS;IFS="=";read -ra options <<< "${args[i]}";IFS=$old_ifs;
                    kc_f_and_o[${options[0]}]=${args[i]}
                    unset args[$i]
                elif [[ ${args[i]} == -* ]]; then
                    kc_f_and_o[${args[$i]}]=${args[$i]}
                    unset args[$i]
                fi
            done
        args=( "${args[@]}" )
    }
    function handle_help() {
        if [[ -z ${@: -1} ]] || [[ ${@: -1} == "-h" ]] || [[ ${@: -1} == "--help" ]]; then
            kubecall_help
            return 1
        fi
        return 2
    }
    function handle_built_in_kubectl_commands () {
        kubectl $@
        return 1
    }
    function handle_context_operation() {
        if [[ $1 == $CONTEXT ]]; then
            active_context=$(kubectl config current-context)
            if [[ $2 == $CURRENT ]]; then
                echo $active_context
                return 1
            elif [[ $2 == $LIST ]];then
                context_list=$(kubectl config get-contexts -o=name | sort -n)
                context_list_array=($context_list)
                echo "$context_list" | grep --color=always -n -e '^' -e $active_context
                return 1
            elif [[ $2 == $SWITCH ]]; then
                context_list=$(kubectl config get-contexts -o=name | sort -n)
                context_list_array=($context_list)
                if [[ -z $3 ]]; then
                    echo "Context name not provided, please choose one from the below."
                else
                    if [[ $active_context == $3 ]]; then
                        echo "$3 already active"
                        return 1
                    fi
                    for i in ${context_list_array[@]}
                        do
                            if [[ $i == $3 ]]; then
                                kubectl config use-context $3
                                return 1
                            fi
                        done
                    echo "Invalid context provided, please choose one from below"
                fi
                echo "$context_list" | grep --color=always -n -e '^' -e $active_context
                echo -e $LINE_SEPERATOR
                echo "Enter the context number to switch to or CTRL+C to exit"
                read context_no
                if [[ $context_no -le 0 ]] || [[ $context_no -gt ${#context_list_array[@]} ]]; then
                    echo "Invalid context selected, exitting."
                    return 0
                fi
                kubectl config use-context ${context_list_array[$context_no - 1]}
                return 1
            else
                echo -e "available commands:\n 1.current - shows current context \n 2.list - lists contexts \n 3.switch <context_name> - switches to given context \n"
                return 0
            fi
        fi
        return 2
    }
    function handle_pod_operation() {
        if [[ $1 != $GET ]] && [[ $1 != $DESCRIBE ]] && [[ $1 != $DELETE ]] && [[ $1 != $LOGS ]] && [[ $1 != $EXEC ]] && [[ $1 != $EXECALL ]]; then
            return 2
        fi
        if [[ $1 == $GET ]] && [[ $2 != $PODS ]]; then
            return 2
        fi
        if [[ $1 == $DESCRIBE ]] && [[ $2 != $POD ]]; then
            return 2
        fi
        if [[ $1 == $DELETE ]] && [[ $2 != $POD ]]; then
            return 2
        fi
        if [[ $1 == $EXEC ]] || [[ $1 == $EXECALL ]] || [[ $1 == $LOGS ]]; then
            if [[ -z $2 ]]; then
                echo "Please provide a pod name pattern"
                return 0
            fi
            pod_pattern=$2
            if [[ $1 != $LOGS ]] && [[ -z $3 ]]; then
                echo "Please provide the command which will be executed on pods identified by $2"
                return 0
            fi
            echo "Remember to quote your command if it is longer than 1 word for it to properly work."
        else
            if [[ -z $3 ]]; then
                echo "Please provide a pod name pattern"
                return 0
            fi
            pod_pattern=$3
        fi
        if [[ -z $pod_pattern ]]; then
            pod_list=$(kubectl get pods ${kc_f_and_o["--context"]})
        else
            pod_list=$(kubectl get pods ${kc_f_and_o["--context"]} | grep $pod_pattern)
        fi
        pod_list_array=($pod_list)
        pod_list_array_length=${#pod_list_array[@]}

        if [[ $pod_list_array_length == 0 ]]; then
            echo "No matching pods found"
            return 0
        fi

        echo "$pod_list" | grep -n '^'
        if [[ $1 == $GET ]] && [[ $2 == $PODS ]]; then
            return 1
        fi

        if [[ $1 == $EXECALL ]]; then
            shift;shift;
            echo "Your command $@ will be executed on all these pods, continue Yes or No?"
            read confirm_action
            if [[ $confirm_action == "yes" ]]; then
                executable_cmd="${@}"
                for ((i = 0 ; i < $pod_list_array_length ; i+=5))
                    do
                        echo "running for pod: ${pod_list_array[i]}"
                        action_result=$(kubectl ${kc_f_and_o["--context"]} exec ${pod_list_array[i]} -- bash -c "$executable_cmd")
                        echo $action_result
                    done
                echo "Execution Completed, exitting."
                return 1
            else
                echo "Invalid input exitting."
                return 0
            fi
        fi
        if [[ $1 == $DELETE ]]; then
            declare -a to_be_deleted
            if [[ ${#pod_list_array[@]} == 5 ]]; then
                to_be_deleted+=(${pod_list_array[0]})
                echo "Do you want to delete above pod, continue Yes or No?"
            else
                echo "Select pods to delete by range or single selection"
                echo "eg. 1-4,7-9,12,14 or presse enter to cancel deletion"

                echo -e $LINE_SEPERATOR
                old_ifs=$IFS; IFS=', ' read -r -a tbs; IFS=$old_ifs

                if [[ ${#tbs[@]} > 0 ]]; then
                    echo -e $LINE_SEPERATOR
                fi
                for i in ${tbs[@]}
                    do
                        if [[ $i -le 0 ]]; then
                            old_ifs=$IFS; IFS='-' read -r -a pod_range <<< $i; IFS=$old_ifs
                            for ((j=$((${pod_range[0]}-1));j<${pod_range[1]};j++)); do
                                if [[ $j -lt 0 ]]; then echo "Invalid option 0, exitting"; exit 0; fi;
                                to_be_deleted+=(${pod_list_array[$(($j * 5))]})
                                echo "${#to_be_deleted[@]}.${pod_list_array[$(($j * 5))]}"
                            done
                        else
                            if [[ $i -le 0 ]]; then echo "Invalid option 0, exitting"; exit 0; fi;
                            to_be_deleted+=(${pod_list_array[$((($i - 1)*5))]})
                            echo "${#to_be_deleted[@]}.${pod_list_array[$((($i - 1)*5))]}"
                        fi
                    done
                echo "Do you want to delete all these pods, continue Yes or No?"
            fi

            read confirm_action
            if [[ $confirm_action == "yes" ]]; then
                echo "deleting pods..."
                kubectl ${kc_f_and_o["--context"]} delete pod ${to_be_deleted[@]}
                return 1
            else
                echo "Invalid input exitting."
                return 0
            fi
        fi

        if [[ ${#pod_list_array[@]} == 5 ]]; then
            pod_index=0
        else
            echo "Enter pod no to select a pod or CTRL+C to exit"
            read pod_no
            if [[ $pod_no =~ '^[0-9]+$' ]]; then echo "Invalid option, exitting"; return 0; fi;
            pod_index=$((($pod_no - 1)*5))
            if [[ $pod_index -lt 0 ]] || [[ $pod_index -ge ${#pod_list_array[@]} ]]; then
                echo "Invalid option selected, exitting."
                return 0
            fi
        fi

        if [[ $1 = $LOGS ]]; then
            if [[ -z ${kc_f_and_o["--json"]} ]]; then
                kubectl ${kc_f_and_o["--context"]} logs ${kc_f_and_o["-f"]} ${kc_f_and_o["--follow"]} ${kc_f_and_o["--tail"]} ${pod_list_array[$pod_index]}
            else
                kubectl ${kc_f_and_o["--context"]} logs ${kc_f_and_o["-f"]} ${kc_f_and_o["--follow"]} ${kc_f_and_o["--tail"]} ${pod_list_array[$pod_index]} | jq -R -r '. as $line | try fromjson catch $line'
            fi
            return 1
        fi

        if [[ $1 == $EXEC ]]; then
            shift;shift
            executable_cmd="${@}"
            kubectl ${kc_f_and_o["--context"]} exec ${kc_f_and_o["-i"]} ${kc_f_and_o["-it"]} ${kc_f_and_o["-t"]} ${pod_list_array[$pod_index]} "$executable_cmd"
            return 1
        fi

        if [[ $1 == $DESCRIBE ]]; then
            kubectl ${kc_f_and_o["--context"]} describe pods/${pod_list_array[$pod_index]}
            return 1
        fi
        return 1
    }
    handle_help $@
    done=$?; if [ $done -lt 2 ]; then return $done; fi
    seperate_args_and_flags
    handle_context_operation ${args[@]}
    done=$?; if [ $done -lt 2 ]; then return $done; fi
    handle_pod_operation ${args[@]}
    done=$?; if [ $done -lt 2 ]; then return $done; fi
    handle_built_in_kubectl_commands ${args[@]}
    done=$?; if [ $done -lt 2 ]; then return $done; fi
    echo "Invalid command provided, check help using kubecall -h or kubecall --help"
    return 0
}

kubecall_main "$@"
